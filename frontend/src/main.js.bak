const { createApp } = Vue;
const { ElMessage, ElMessageBox, ElLoading } = ElementPlus;

// 配置axios
//const api = axios.create({
//    baseURL: 'http://' + window.location.hostname + ':8000/api/',
//    timeout: 10000,
//});

// 配置axios
const api = axios.create({
    baseURL: 'http://10.203.41.67:8000/api/',
    timeout: 10000,
    withCredentials: true,  // 添加这行
    headers: {
        'X-Requested-With': 'XMLHttpRequest',
    }
});


// 添加CSRF token处理
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// 请求拦截器
api.interceptors.request.use(
    config => {
        const csrftoken = getCookie('csrftoken');
        if (csrftoken) {
            config.headers['X-CSRFToken'] = csrftoken;
        }
        return config;
    },
    error => {
        return Promise.reject(error);
    }
);


// 请求拦截器
//api.interceptors.request.use(
//    config => {
//        const token = localStorage.getItem('token');
//        if (token) {
//            config.headers.Authorization = `Token ${token}`;
//        }
//        return config;
//    },
//    error => {
//        return Promise.reject(error);
//    }
//);

// 响应拦截器
api.interceptors.response.use(
    response => response,
    error => {
        if (error.response?.status === 401) {
            ElMessage.error('请先登录');
            window.location.href = '/login.html';
        }
        return Promise.reject(error);
    }
);

const App = {
    data() {
        return {
            activeMenu: 'dashboard',
            isCollapse: false,
            stats: {
                today_count: 0,
                week_count: 0,
                month_count: 0,
                pass_rate: 0,
                need_recording: 0
            },
            interviews: [],
            statusStats: [],
            calendarData: [],
            currentView: 'dashboard'
        };
    },
    mounted() {
        this.loadDashboardData();
    },
    methods: {
        async loadDashboardData() {
            try {
                const loading = ElLoading.service({ fullscreen: true });
                
                // 并行加载所有数据
                const [statsRes, interviewsRes, statusRes, calendarRes] = await Promise.all([
                    api.get('dashboard/stats/'),
                    api.get('interviews/'),
                    api.get('dashboard/stats/'),
                    api.get('dashboard/calendar/')
                ]);

                this.stats = statsRes.data;
                this.interviews = interviewsRes.data;
                this.statusStats = statusRes.data.status_stats;
                this.calendarData = calendarRes.data;
                
                loading.close();
            } catch (error) {
                ElMessage.error('加载数据失败');
                console.error('Error loading data:', error);
            }
        },
        navigateTo(view) {
            this.currentView = view;
            if (view === 'dashboard') {
                this.loadDashboardData();
            }
        },
        getStatusType(status) {
            const typeMap = {
                'scheduled': 'primary',
                'in_progress': 'warning',
                'completed': 'success',
                'cancelled': 'danger',
                'passed': 'success',
                'rejected': 'danger',
                'pending': 'info',
                'offer': 'success',
                'declined': 'danger'
            };
            return typeMap[status] || 'info';
        },
        getStatusText(status) {
            const textMap = {
                'scheduled': '已安排',
                'in_progress': '面试中',
                'completed': '已完成',
                'cancelled': '已取消',
                'passed': '通过',
                'rejected': '未通过',
                'pending': '待定',
                'offer': '发放Offer',
                'declined': '已拒绝'
            };
            return textMap[status] || status;
        },
        formatDateTime(datetime) {
            if (!datetime) return '';
            return new Date(datetime).toLocaleString('zh-CN');
        },
        async uploadRecording(interviewId) {
            try {
                const { value: file } = await ElMessageBox.prompt('请选择录音文件', '上传录音', {
                    inputType: 'file',
                    inputPlaceholder: '选择文件'
                });
                
                if (file) {
                    const formData = new FormData();
                    formData.append('recording', file);
                    
                    await api.post(`interviews/${interviewId}/upload_recording/`, formData, {
                        headers: { 'Content-Type': 'multipart/form-data' }
                    });
                    
                    ElMessage.success('录音上传成功');
                    this.loadDashboardData();
                }
            } catch (error) {
                if (error !== 'cancel') {
                    ElMessage.error('上传失败');
                }
            }
        },
        async completeInterview(interviewId) {
            try {
                await ElMessageBox.confirm('确定要完成这个面试吗？', '确认完成', {
                    type: 'warning'
                });
                
                await api.post(`interviews/${interviewId}/complete_interview/`);
                ElMessage.success('面试已完成');
                this.loadDashboardData();
            } catch (error) {
                if (error !== 'cancel') {
                    ElMessage.error('操作失败');
                }
            }
        }
    },
    template: `
        <el-container style="height: 100vh;">
            <el-header>
                <div style="display: flex; align-items: center;">
                    <h1 style="margin: 0; font-size: 24px;">🎯 面试管理平台</h1>
                </div>
                <div>
                    <el-button type="text" style="color: white;" @click="navigateTo('dashboard')">
                        首页
                    </el-button>
                    <el-button type="text" style="color: white;" @click="navigateTo('interviews')">
                        面试管理
                    </el-button>
                    <el-button type="text" style="color: white;" @click="navigateTo('stats')">
                        统计分析
                    </el-button>
                </div>
            </el-header>

            <el-container>
                <el-aside width="200px">
                    <el-menu
                        :default-active="activeMenu"
                        background-color="#304156"
                        text-color="#bfcbd9"
                        active-text-color="#409EFF"
                        router
                    >
                        <el-menu-item index="dashboard" @click="navigateTo('dashboard')">
                            <i class="el-icon-data-line"></i>
                            <span>数据看板</span>
                        </el-menu-item>
                        <el-menu-item index="interviews" @click="navigateTo('interviews')">
                            <i class="el-icon-date"></i>
                            <span>面试管理</span>
                        </el-menu-item>
                        <el-menu-item index="stats" @click="navigateTo('stats')">
                            <i class="el-icon-s-data"></i>
                            <span>统计分析</span>
                        </el-menu-item>
                        <el-menu-item index="admin" @click="window.open('/admin/', '_blank')">
                            <i class="el-icon-s-tools"></i>
                            <span>管理后台</span>
                        </el-menu-item>
                    </el-menu>
                </el-aside>

                <el-main>
                    <div v-if="currentView === 'dashboard'">
                        <!-- 统计卡片 -->
                        <el-row :gutter="20">
                            <el-col :span="6">
                                <div class="stat-card">
                                    <div class="stat-title">今日面试</div>
                                    <div class="stat-value">{{ stats.today_count }}</div>
                                </div>
                            </el-col>
                            <el-col :span="6">
                                <div class="stat-card">
                                    <div class="stat-title">本周面试</div>
                                    <div class="stat-value">{{ stats.week_count }}</div>
                                </div>
                            </el-col>
                            <el-col :span="6">
                                <div class="stat-card">
                                    <div class="stat-title">本月面试</div>
                                    <div class="stat-value">{{ stats.month_count }}</div>
                                </div>
                            </el-col>
                            <el-col :span="6">
                                <div class="stat-card">
                                    <div class="stat-title">通过率</div>
                                    <div class="stat-value">{{ stats.pass_rate }}%</div>
                                </div>
                            </el-col>
                        </el-row>

                        <!-- 面试表格 -->
                        <div class="interview-table">
                            <h3>今日面试安排</h3>
                            <el-table :data="interviews" style="width: 100%">
                                <el-table-column prop="candidate_name" label="候选人" width="120"></el-table-column>
                                <el-table-column prop="company_name" label="公司" width="150"></el-table-column>
                                <el-table-column prop="position_title" label="职位" width="150"></el-table-column>
                                <el-table-column label="面试时间" width="180">
                                    <template #default="{row}">
                                        {{ formatDateTime(row.scheduled_time) }}
                                    </template>
                                </el-table-column>
                                <el-table-column label="状态" width="100">
                                    <template #default="{row}">
                                        <el-tag :type="getStatusType(row.status)" class="status-tag">
                                            {{ getStatusText(row.status) }}
                                        </el-tag>
                                    </template>
                                </el-table-column>
                                <el-table-column label="结果" width="100">
                                    <template #default="{row}">
                                        <el-tag :type="getStatusType(row.result)" class="status-tag">
                                            {{ getStatusText(row.result) }}
                                        </el-tag>
                                    </template>
                                </el-table-column>
                                <el-table-column label="操作" width="200">
                                    <template #default="{row}">
                                        <el-button 
                                            v-if="row.status === 'completed' && !row.recording_uploaded"
                                            size="small" 
                                            type="warning"
                                            @click="uploadRecording(row.id)"
                                        >
                                            上传录音
                                        </el-button>
                                        <el-button 
                                            v-if="row.status !== 'completed'"
                                            size="small" 
                                            type="primary"
                                            @click="completeInterview(row.id)"
                                        >
                                            完成面试
                                        </el-button>
                                    </template>
                                </el-table-column>
                            </el-table>
                        </div>
                    </div>

                    <div v-else-if="currentView === 'interviews'">
                        <div class="dashboard-card">
                            <h3>面试管理</h3>
                            <p>这里可以显示所有面试的详细管理功能</p>
                        </div>
                    </div>

                    <div v-else-if="currentView === 'stats'">
                        <div class="dashboard-card">
                            <h3>统计分析</h3>
                            <p>这里可以显示各种统计图表和分析报告</p>
                        </div>
                    </div>
                </el-main>
            </el-container>
        </el-container>
    `
};

createApp(App).use(ElementPlus).mount('#app');
